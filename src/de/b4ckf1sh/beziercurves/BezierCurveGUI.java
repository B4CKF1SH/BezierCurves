package de.b4ckf1sh.beziercurves;

import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.ui.FlatButtonBorder;
import de.b4ckf1sh.libs.Vector;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 * GUI class for creation and display of simple Bezier curves generated by 3 points in 2-dimensional space.
 *
 * @version 1.0
 * @author B4CKF1SH
 */
public class BezierCurveGUI {
    // this exists to remove code clutter, as we only ever implement the clicked event
    private interface ClickListener extends MouseListener {
        @Override
        default void mousePressed(MouseEvent e) {
        }

        @Override
        default void mouseReleased(MouseEvent e) {
        }

        @Override
        default void mouseEntered(MouseEvent e) {
        }

        @Override
        default void mouseExited(MouseEvent e) {
        }
    }

    private static class SelectVectorListener implements ClickListener {

        BezierCurveGUI ref;
        int num;

        public SelectVectorListener(BezierCurveGUI ref, int num) {
            this.ref = ref;
            this.num = num;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            ref.selectVector(num);
        }
    }

    /*
    For some reason IntelliJ creates UI between the times static initialization blocks and static void main are called.
    Therefore we must set the UI theme before the UI creation in such a static initialization block.
     */
    static {
        FlatLightLaf.setup();
    }

    private static final Color NORMAL_BG = Color.WHITE;
    private static final Color SELECTED_BG = Color.LIGHT_GRAY;

    private static final Color POINT_COLOR = Color.BLACK;
    private static final Color MAIN_LINE_COLOR = new Color(0xEA5B25);
    private static final Color HELPER_LINE_COLOR = new Color(0x0069b3);
    private static final Color CURVE_COLOR = new Color(0x14C30D);


    private final Vector[] vectors = new Vector[3];

    { // initialization blocks are cool if you can't be bothered writing constructors.
        vectors[0] = new Vector(0, 0);
        vectors[1] = new Vector(0, 0);
        vectors[2] = new Vector(0, 0);
    }

    private int selectedIndex = 0;

    private JPanel panel1;
    private JFrame frame;

    private JPanel vector1;
    private JPanel vector2;
    private JPanel vector3;

    private JLabel v1n1;
    private JLabel v1n2;

    private JLabel v2n1;
    private JLabel v2n2;

    private JLabel v3n1;
    private JLabel v3n2;

    private JCheckBox checkBoxDrawPoints;
    private JCheckBox checkBoxDrawLines;
    private JSlider slider1;
    private JCheckBox checkBoxDrawCurve;
    private JButton creditsButton;
    private JCheckBox fastRenderCheckBox;

    { // they also let us put code directly after the field declaration
        checkBoxDrawPoints.addActionListener(e -> repaint());
        checkBoxDrawLines.addActionListener(e -> repaint());
        checkBoxDrawCurve.addActionListener(e -> repaint());
        slider1.addChangeListener(e -> {
            if (checkBoxDrawLines.isSelected()) repaint();
        });
        checkBoxDrawPoints.setSelected(true);
        checkBoxDrawLines.setSelected(true);

        updateVectors();

        FlatButtonBorder border = new FlatButtonBorder();
        vector1.setBorder(border);
        vector2.setBorder(border);
        vector3.setBorder(border);

        vector1.setBackground(SELECTED_BG);
        vector2.setBackground(NORMAL_BG);
        vector3.setBackground(NORMAL_BG);

        vector1.addMouseListener(new SelectVectorListener(this, 1));
        vector2.addMouseListener(new SelectVectorListener(this, 2));
        vector3.addMouseListener(new SelectVectorListener(this, 3));

        panel1.addMouseListener((ClickListener) e -> {
            vectors[selectedIndex] = new Vector(e.getX() + 5, e.getY() + 30);
            updateVectors();

            selectVector(((selectedIndex + 1) % 3) + 1);

            repaint();
        });

        creditsButton.addActionListener(e -> JOptionPane.showMessageDialog(frame,
                "Created by Robin Schupp\nÂ©2021", "BezierCurveGUI", JOptionPane.PLAIN_MESSAGE));
    }

    // select the specified vector for editing, both in backend as in frontend
    private void selectVector(int num) {
        if (num == 1) {
            vector1.setBackground(SELECTED_BG);
            vector2.setBackground(NORMAL_BG);
            vector3.setBackground(NORMAL_BG);

            selectedIndex = 0;
        } else if (num == 2) {
            vector2.setBackground(SELECTED_BG);
            vector3.setBackground(NORMAL_BG);
            vector1.setBackground(NORMAL_BG);

            selectedIndex = 1;
        } else if (num == 3) {
            vector3.setBackground(SELECTED_BG);
            vector2.setBackground(NORMAL_BG);
            vector1.setBackground(NORMAL_BG);

            selectedIndex = 2;
        }
    }

    // display current vector coordinates
    private void updateVectors() {
        v1n1.setText(String.valueOf(vectors[0].getX()));
        v1n2.setText(String.valueOf(vectors[0].getY()));

        v2n1.setText(String.valueOf(vectors[1].getX()));
        v2n2.setText(String.valueOf(vectors[1].getY()));

        v3n1.setText(String.valueOf(vectors[2].getX()));
        v3n2.setText(String.valueOf(vectors[2].getY()));
    }

    private void repaint() {
        if (frame != null) {
            frame.repaint();
        }
    }

    public static void main(String[] args) {
        BezierCurveGUI gui = new BezierCurveGUI();

        // show UI
        JFrame frame = new JFrame("Bezier Curves") {
            @Override
            public void paint(Graphics g) { // TODO: look at optimization potential, still slow
                
                // draw UI Components
                super.paint(g);

                // set rendering flags for better quality
                Graphics2D g2d = (Graphics2D) g;
                if (gui.fastRenderCheckBox.isEnabled()) g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);

                Vector p0 = gui.vectors[0];
                Vector p1 = gui.vectors[1];
                Vector p2 = gui.vectors[2];

                Vector p0p1 = Vector.add(p1, Vector.multiply(p0, -1));
                Vector p1p2 = Vector.add(p2, Vector.multiply(p1, -1));
                Vector p0p2 = Vector.add(p2, Vector.multiply(p0, -1));

                final int pointSize = 4;

                // draw curve
                if (gui.checkBoxDrawCurve.isSelected()) {
                    // set accuracy
                    int dist1 = p0p1.lengthSquared();
                    int dist2 = p1p2.lengthSquared();
                    int dist3 = p0p2.lengthSquared();
                    int sections = (int) Math.sqrt(Math.max(dist1, Math.max(dist2, dist3)));

                    g2d.setColor(CURVE_COLOR);

                    Vector bOld = p0;
                    for (int i = 0; i <= sections; i++) {
                        double t = i / (double) sections;

                        // helper points
                        Vector q0 = Vector.add(Vector.multiply(p0p1, t), p0);
                        Vector q1 = Vector.add(Vector.multiply(p1p2, t), p1);

                        // helper line
                        Vector q0q1 = Vector.add(q1, Vector.multiply(q0, -1));

                        // final point
                        Vector b = Vector.add(Vector.multiply(q0q1, t), q0);

                        // smooth line (connect current point to last point)
                        g2d.drawLine(bOld.getX(), bOld.getY(), b.getX(), b.getY());

                        bOld = b;
                    }
                }

                // draw lines
                if (gui.checkBoxDrawLines.isSelected()) {
                    // outer lines
                    g2d.setColor(MAIN_LINE_COLOR);
                    g2d.drawLine(p0.getX(), p0.getY(), p1.getX(), p1.getY());
                    g2d.drawLine(p2.getX(), p2.getY(), p1.getX(), p1.getY());

                    // helper line
                    g2d.setColor(HELPER_LINE_COLOR);
                    double t = gui.slider1.getValue() / 2000.0;
                    Vector q0 = Vector.add(Vector.multiply(p0p1, t), p0);
                    Vector q1 = Vector.add(Vector.multiply(p1p2, t), p1);
                    g2d.drawLine(q0.getX(), q0.getY(), q1.getX(), q1.getY());

                    // middle point
                    g2d.setColor(POINT_COLOR);
                    Vector q0q1 = Vector.add(q1, Vector.multiply(q0, -1));
                    Vector b = Vector.add(Vector.multiply(q0q1, t), q0);
                    // black coordinate magic
                    g2d.fill3DRect(b.getX() - pointSize / 2 + 1, b.getY() - pointSize / 2 + 1, pointSize, pointSize, false);
                    g2d.drawString("B", b.getX(), b.getY() - 10);
                }

                // draw points
                if (gui.checkBoxDrawPoints.isSelected()) {
                    g2d.setColor(POINT_COLOR);

                    // more black coordinate magic
                    g2d.fill3DRect(p0.getX() - pointSize / 2 + 1, p0.getY() - pointSize / 2 + 1, pointSize, pointSize, false);
                    g2d.drawString("P0", p0.getX(), p0.getY() - 10);
                    g2d.fill3DRect(p1.getX() - pointSize / 2 + 1, p1.getY() - pointSize / 2 + 1, pointSize, pointSize, false);
                    g2d.drawString("P1", p1.getX(), p1.getY() - 10);
                    g2d.fill3DRect(p2.getX() - pointSize / 2 + 1, p2.getY() - pointSize / 2 + 1, pointSize, pointSize, false);
                    g2d.drawString("P2", p2.getX(), p2.getY() - 10);
                }
            }
        };

        gui.frame = frame;

        frame.setContentPane(gui.panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(700, 500);
        frame.setVisible(true);
    }
}
